# -*- coding: utf-8 -*-
"""phantom_model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10zUfAl_pmQza0JTI6FEsyoRyzR2ipt6S
"""

import pandas as pd
import numpy as np

try:
    df = pd.read_csv("OpenBCI-RAW-2025-09-13_23-58-04.csv")
except Exception as e:
    print(f"Error reading with default settings: {e}")
    try:
        # Try reading with a different delimiter, e.g., tab or semicolon
        df = pd.read_csv("OpenBCI-RAW-2025-09-13_23-58-04.csv", delimiter='\t')
        print("Successfully read with tab delimiter")
    except Exception as e:
        print(f"Error reading with tab delimiter: {e}")
        try:
            df = pd.read_csv("OpenBCI-RAW-2025-09-13_23-58-04.csv", delimiter=';')
            print("Successfully read with semicolon delimiter")
        except Exception as e:
            print(f"Error reading with semicolon delimiter: {e}")
            # If still failing, try to read the first few lines to diagnose the issue
            try:
                with open("OpenBCI-RAW-2025-09-13_23-58-04.csv", 'r') as f:
                    for i in range(10):
                        line = f.readline()
                        print(f"Line {i+1}: {line}")
            except Exception as e:
                print(f"Could not read file: {e}")

with open("OpenBCI-RAW-2025-09-13_23-58-04.csv", 'r') as f:
    for i in range(10):
        line = f.readline()
        print(f"Line {i+1}: {line}")

df = pd.read_csv("OpenBCI-RAW-2025-09-13_23-58-04.csv", skiprows=6, delimiter=', ', engine='python')
display(df.head())

with open("OpenBCI-RAW-2025-09-13_23-58-04.csv", 'r') as f:
    for i in range(5): # Read up to line 5 to confirm the header row
        line = f.readline()
        if i == 4:  # Line 5 (index 4) is the header row
            print(f"Header Line: {line}")

header = pd.read_csv("OpenBCI-RAW-2025-09-13_23-58-04.csv", skiprows=4, nrows=1, delimiter=', ', engine='python')
df.columns = header.columns
display(df.head())

non_zero_marker_rows = df[df['Marker'] != 0]
num_non_zero_markers = len(non_zero_marker_rows)
print(f"Number of rows where Marker is not zero:` {num_non_zero_markers}")

# Remove "EOG " from column names
df.columns = df.columns.str.replace('EOG ', '', regex=False)

# Drop specified columns
columns_to_drop = ['Channel 0', 'Channel 1'] + [f'Channel {i}' for i in range(10, 16)] + \
                  ['Accel Channel 0', 'Accel Channel 1', 'Accel Channel 2', 'Not Used',
                   'Digital Channel 0 (D11)', 'Digital Channel 1 (D12)', 'Digital Channel 2 (D13)',
                   'Digital Channel 3 (D17)', 'Not Used.1', 'Digital Channel 4 (D18)',
                   'Analog Channel 0', 'Analog Channel 1', 'Analog Channel 2']
df = df.drop(columns=columns_to_drop, errors='ignore')

display(df.head())

# Rename columns
new_channel_names = {
    'Channel 2': 'C3',
    'Channel 3': 'C4',
    'Channel 4': 'P7',
    'Channel 5': 'P8',
    'Channel 6': 'P3',
    'Channel 7': 'P4',
    'Channel 8': 'T7',
    'Channel 9': 'T8'
}
df = df.rename(columns=new_channel_names)

display(df.head())

# Find the indices where the 'Marker' column is not zero
marker_indices = df[df['Marker'] != 0].index

# Define the window size
before_window = 49
after_window = 200

# Iterate through the marker indices and propagate the marker value
for index in marker_indices:
    marker_value = df.loc[index, 'Marker']
    start_index = max(0, index - before_window)
    end_index = min(len(df) - 1, index + after_window)

    # Propagate to zeros only - preserve existing non-zero markers
    mask = (df.loc[start_index:end_index, 'Marker'] == 0)
    df.loc[start_index:end_index, 'Marker'] = df.loc[start_index:end_index, 'Marker'].where(~mask, marker_value)

